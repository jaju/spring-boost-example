* Sample SpringBoot project using [[https://github.com/jaju/spring-boost][spring-boost]]

When run normally, it does not load and run the Clojure code.

Clojure code is enabled only when the ~dev~ profile is activated

*Note*: There is no reason it _should_ be so. If you are adventurous enough (or believe in Clojure), get rid of the ~@Profile("dev")~ annotation in the [[file:src/main/java/org/msync/spring_clj/DevWorx.java][~DevWorx~]] class.

#+begin_src bash
SPRING_PROFILES_ACTIVE=dev ./gradlew clean bootRun

#or

./gradlew clean bootRun --args='--spring.profiles.active=dev'
#+end_src


Output looks something like
#+begin_example
> Task :bootRun

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.4)

[2021-09-10 12:08:14,182] INFO  [main] org.msync.spring_boost.application_context$_component_init::invokeStatic Initializing the ClojureComponent
[2021-09-10 12:08:14,984] INFO  [main] org.msync.spring_boost.Boost::startNrepl nREPL server started on port = 8190
[2021-09-10 12:08:14,986] INFO  [main] org.msync.spring_boost.Boost::setupAppInit Initializing clojure code: org.msync.spring-clj.core/main
[2021-09-10 12:08:21,097] INFO  [main] jdk.internal.reflect.NativeMethodAccessorImpl::invoke0 [spring-clj] Initializing clojure app...n
<===========--> 85% EXECUTING [29s]
> :bootRun
#+end_example

** The Clojure Code
#+begin_src clojure :tangle src/main/clojure/org/msync/spring_clj/core.clj :comments link
(ns org.msync.spring-clj.core
  (:require [org.msync.spring-boost :as boost]
            [compojure.core :refer :all]
            [compojure.route :refer [not-found]]
            [clojure.string]
            [clojure.pprint :refer [pprint]])
  (:import [java.util.logging Logger]
           [org.springframework.context ApplicationContext]))

(defonce logger (Logger/getLogger (str *ns*)))

(defroutes app
  "Root hello-world GET endpoint, and another echo end-point that handles both GET and POST.
  The :body entry in the request-map comes in either as a map for JSON requests, or as a String
  for other types."
  (GET "/" [:as {query-string :query-string}]
       (str "<h1>Hello World.</h1>"
            (if-not (clojure.string/blank? query-string) (str "We received a query-string " query-string))))
  (GET "/echo/:greeter" [greeter]
       {:status 200
        :headers {:content-type "application/json"}
        :body {:greeting (str "Hello, " greeter)}})
  (POST "/echo/:greeter" [greeter :as request]
        {:status 200
         :headers {:content-type "application/json"}
         :body {:greetings (str "Hello, " greeter)
                :echo (:body request)}})
  (not-found "<h1>Page not found</h1>"))

(defn web-socket-handler [session]
  (pprint session)
  ;; Use the session as you wish - to create session-specific handlers
  (fn [^String message]
    (str "*Hello*, " (.toUpperCase message))))

(defn main
  "Set this as your entry-point for the Clojure code in your spring-boot app.
  Gets the ApplicationContext object as an argument - which you are free to ignore or use."
  [^ApplicationContext application-context]

  (.info logger (str "[spring-clj] Initializing clojure app..."))
  (boost/set-handler! app)
  (boost/set-websocket-handler! web-socket-handler))

(comment
  (require '[org.msync.spring-boost.application-context :as ac])
  (ac/get-application-context)
  (ac/beans-with-annotation org.springframework.stereotype.Component)
  (->> (ac/beans-with-annotation org.springframework.stereotype.Component)
       vals
       (map class)))
#+end_src
